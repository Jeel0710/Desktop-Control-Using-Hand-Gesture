# -*- coding: utf-8 -*-
"""train_model2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aOTsJf-xKCrvMI7bBCVTaaNuPhbwkxQU
"""

import pandas as pd
import numpy as np
from PIL import Image
from skimage import transform
import cv2
import matplotlib.pyplot as plt
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
from keras.layers import Dense, Dropout, Flatten

!pip install kaggle

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d muhammadkhalid/sign-language-for-numbers

!mkdir train
!unzip /content/sign-language-for-numbers.zip

images_path = 'Sign Language for Numbers'
classes = "0 1 2 unknown".split()
len(classes)

image = Image.open(images_path + '/0/zero_1.jpg')
print(image.size)
image

img = cv2.imread(images_path + '/0/zero_1.jpg')
img.shape

data_generator = ImageDataGenerator(width_shift_range=0.2, height_shift_range=0.2,
                                   shear_range=0.2, horizontal_flip=True)

data_batches = data_generator.flow_from_directory(images_path, class_mode='categorical',
                                                 target_size=(100, 72), batch_size=64)

model = Sequential()

model.add(Conv2D(32, kernel_size=4, padding='same', kernel_initializer='he_uniform', input_shape=(100,72,3)))
model.add(BatchNormalization())

model.add(Conv2D(64, kernel_size=4, padding='same', kernel_initializer='he_uniform'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(rate=0.2))

model.add(Flatten())
model.add(Dense(64, activation='relu', kernel_initializer='he_uniform'))
model.add(BatchNormalization())

model.add(Dense(11, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

checkpoint = keras.callbacks.ModelCheckpoint(filepath='model2_{epoch:02d}.h5', save_freq=10) 

history = model.fit_generator(data_batches, steps_per_epoch=(6000//64), epochs=50, callbacks=[checkpoint])

model.save("final_model.h5")
hist = history.history
hist.keys()

plt.figure(figsize=(10,6))
plt.plot(hist['loss'])
plt.title('Loss Plot')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.savefig('loss_plot_2.jpg')
plt.show()

plt.figure(figsize=(10,6))
plt.plot(hist['accuracy'])
plt.title('Accuracy Plot')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.savefig('accuracy_plot.jpg')
plt.show()